{
    "params": {},
    "state": {
        "test_eq_true": {
            "type": "bool",
            "calc": {"call": "eq", "args": {"a": 5, "b": 5}}
        },
        "test_eq_false": {
            "type": "bool",
            "calc": {"call": "eq", "args": {"a": 5, "b": 3}}
        },
        "test_ne_true": {
            "type": "bool",
            "calc": {"call": "ne", "args": {"a": 5, "b": 3}}
        },
        "test_ne_false": {
            "type": "bool",
            "calc": {"call": "ne", "args": {"a": 5, "b": 5}}
        },
        "test_lt_true": {
            "type": "bool",
            "calc": {"call": "lt", "args": {"a": 3, "b": 5}}
        },
        "test_lt_false": {
            "type": "bool",
            "calc": {"call": "lt", "args": {"a": 5, "b": 3}}
        },
        "test_le_true": {
            "type": "bool",
            "calc": {"call": "le", "args": {"a": 5, "b": 5}}
        },
        "test_le_false": {
            "type": "bool",
            "calc": {"call": "le", "args": {"a": 7, "b": 5}}
        },
        "test_gt_true": {
            "type": "bool",
            "calc": {"call": "gt", "args": {"a": 7, "b": 5}}
        },
        "test_gt_false": {
            "type": "bool",
            "calc": {"call": "gt", "args": {"a": 3, "b": 5}}
        },
        "test_ge_true": {
            "type": "bool",
            "calc": {"call": "ge", "args": {"a": 5, "b": 5}}
        },
        "test_ge_false": {
            "type": "bool",
            "calc": {"call": "ge", "args": {"a": 3, "b": 5}}
        },
        "test_bool_true": {
            "type": "bool",
            "calc": {"call": "bool", "args": {"object": 1}}
        },
        "test_bool_false": {
            "type": "bool", 
            "calc": {"call": "bool", "args": {"object": 0}}
        },
        "test_not_true": {
            "type": "bool",
            "calc": {"call": "not", "args": {"object": true}}
        },
        "test_not_false": {
            "type": "bool",
            "calc": {"call": "not", "args": {"object": false}}
        },
        "test_neg": {
            "type": "int",
            "calc": {"call": "neg", "args": {"object": 5}}
        },
        "test_and_true": {
            "type": "bool",
            "calc": {"call": "and", "args": {"a": true, "b": true}}
        },
        "test_and_false": {
            "type": "bool", 
            "calc": {"call": "and", "args": {"a": true, "b": false}}
        },
        "test_or_true": {
            "type": "bool",
            "calc": {"call": "or", "args": {"a": false, "b": true}}
        },
        "test_or_false": {
            "type": "bool",
            "calc": {"call": "or", "args": {"a": false, "b": false}}
        },
        "test_int": {
            "type": "int",
            "calc": {"call": "int", "args": {"number": 42.7}}
        },
        "test_int_base": {
            "type": "int",
            "calc": {"call": "int", "args": {"string": "2A", "base": 16}}
        },
        "test_float": {
            "type": "float",
            "calc": {"call": "float", "args": {"number": "1e-003"}}
        },
        "test_round_default": {
            "type": "int",
            "calc": {"call": "round", "args": {"number": 3.14159}}
        },
        "test_round_ndigits": {
            "type": "float",
            "calc": {"call": "round", "args": {"number": 3.14159, "ndigits": 3}}
        },
        "test_str": {
            "type": "str",
            "calc": {"call": "str", "args": {"object": 123}}
        },
        "test_join": {
            "type": "str",
            "calc": {"call": "join", "args": {"separator": "-", "items": ["a", "b", "c"]}}
        },
        "test_add": {
            "type": "int",
            "calc": {"call": "add", "args": {"a": 10, "b": 5}}
        },
        "test_sub": {
            "type": "int", 
            "calc": {"call": "sub", "args": {"a": 10, "b": 3}}
        },
        "test_mul": {
            "type": "int",
            "calc": {"call": "mul", "args": {"a": 4, "b": 7}}
        },
        "test_div": {
            "type": "float",
            "calc": {"call": "div", "args": {"a": 15, "b": 3}}
        },
        "test_floordiv": {
            "type": "int",
            "calc": {"call": "floordiv", "args": {"a": 15, "b": 2}}
        },
        "test_mod": {
            "type": "int",
            "calc": {"call": "mod", "args": {"a": 15, "b": 4}}
        },
        "test_pow": {
            "type": "int",
            "calc": {"call": "pow", "args": {"a": 2, "b": 3}}
        },
        "test_min": {
            "type": "int",
            "calc": {"call": "min", "args": {"a": 3, "b": 7}}
        },
        "test_max": {
            "type": "int",
            "calc": {"call": "max", "args": {"a": 3, "b": 7}}
        },
        "test_abs": {
            "type": "int",
            "calc": {"call": "abs", "args": {"number": -10}}
        },
        "test_len_list": {
            "type": "int",
            "calc": {"call": "len", "args": {"object": [1,2,3,4,5]}}
        },
        "test_len_string": {
            "type": "int",
            "calc": {"call": "len", "args": {"object": "hello"}}
        },
        "test_range_default": {
            "type": "list",
            "calc": {"call": "range", "args": {"stop": 5}}
        },
        "test_range_start": {
            "type": "list",
            "calc": {"call": "range", "args": {"start": 1, "stop": 7}}
        },
        "test_range_step": {
            "type": "list",
            "calc": {"call": "range", "args": {"start": 0, "stop": 10, "step": 2}}
        },
        "test_slice_default": {
            "type": "list",
            "calc": {"call": "slice", "args": {"iterator": [0,1,2,3,4 ], "stop": 2}}
        },
        "test_slice_start": {
            "type": "list",
            "calc": {"call": "slice", "args": {"iterator": [0,1,2,3,4,5,6], "start": 2, "stop": 5}}
        },
        "test_slice_step": {
            "type": "list",
            "calc": {"call": "slice", "args": {"iterator": [0,1,2,3,4], "start": 1, "stop": 4, "step": 2}}
        },
        "test_any_true": {
            "type": "bool",
            "calc": {"call": "any", "args": {"iterable": [true, false]}}
        },
        "test_any_false": {
            "type": "bool",
            "calc": {"call": "any", "args": {"iterable": [false, false]}}
        },
        "test_all_true": {
            "type": "bool",
            "calc": {"call": "all", "args": {"iterable": [true, true]}}
        },
        "test_all_false": {
            "type": "bool",
            "calc": {"call": "all", "args": {"iterable": [true, false]}}
        },
        "test_sum": {
            "type": "int",
            "calc": {"call": "sum", "args": {"iterable": [1,2,3], "start": 0}}
        },
        "test_sum_start": {
            "type": "int",
            "calc": {"call": "sum", "args": {"iterable": [1,2,3], "start": 10}}
        },
        "test_sorted": {
            "type": "list",
            "calc": {"call": "sorted", "args": {"iterable": [5,2,9]}}
        },
        "test_map": {
            "type": "list",
            "calc": {
                "call": "map",
                "args": {
                    "function": {"call": "add", "args": {"a": {"self": "item"}, "b": 10}},
                    "iterable": [1, 2, 3, 4, 5]
                }
            }
        },
        "test_filter": {
            "type": "list",
            "calc": {
                "call": "filter",
                "args": {
                    "function": {"call": "gt", "args": {"a": {"self": "item"}, "b": 3}},
                    "iterable": [1, 2, 3, 4, 5, 6, 7]
                }
            }
        },
        "test_dropwhile": {
            "type": "list",
            "calc": {
                "call": "dropwhile",
                "args": {
                    "function": {"call": "lt", "args": {"a": {"self": "item"}, "b": 4}},
                    "iterable": [1, 2, 3, 4, 5, 6, 7]
                }
            }
        },
        "test_takewhile": {
            "type": "list",
            "calc": {
                "call": "takewhile",
                "args": {
                    "function": {"call": "lt", "args": {"a": {"self": "item"}, "b": 4}},
                    "iterable": [1, 2, 3, 4, 5, 6, 7]
                }
            }
        },
        "test_reversed": {
            "type": "list",
            "calc": {"call": "reversed", "args": {"sequence": [1,2,3]}}
        },
        "test_accumulate": {
            "type": "list",
            "calc": {"call": "accumulate", "args": {"iterable": [1,2,3,4], "function": {"call": "add", "args": {"a": {"self": "item"}, "b": {"self": "next_item"}}}}}
        },
        "test_accumulate_initial": {
            "type": "list",
            "calc": {"call": "accumulate", "args": {"iterable": [1,2,3,4], "function": {"call": "add", "args": {"a": {"self": "item"}, "b": {"self": "next_item"}}}, "initial": 10}}
        },
        "test_reduce": {
            "type": "int",
            "calc": {"call": "reduce", "args": {"iterable": [1,2,3,4], "function": {"call": "add", "args": {"a": {"self": "item"}, "b": {"self": "next_item"}}}}}
        },
        "test_reduce_initial": {
            "type": "int",
            "calc": {"call": "reduce", "args": {"iterable": [1,2,3,4], "function": {"call": "add", "args": {"a": {"self": "item"}, "b": {"self": "next_item"}}}, "initial": 10}}
        }
    },
    "ops": {},
    "output": [
        {"heading": {"text": "Function Tests"}, "level": 1},
        {"block": [
            {"text": "Boolean Functions:"},
            {"break": 1},
            {"text": "bool(1) = "}, {"lingo": {"state": {"test_bool_true": {}}}}, {"break": 1},
            {"text": "bool(0) = "}, {"lingo": {"state": {"test_bool_false": {}}}}, {"break": 1},
            {"text": "not(true) = "}, {"lingo": {"state": {"test_not_true": {}}}}, {"break": 1},
            {"text": "not(false) = "}, {"lingo": {"state": {"test_not_false": {}}}}, {"break": 1},
            {"text": "neg(5) = "}, {"lingo": {"state": {"test_neg": {}}}}, {"break": 2},

            {"text": "String Functions:"},
            {"break": 1},
            {"text": "str(123) = "}, {"lingo": {"state": {"test_str": {}}}}, {"break": 1},
            {"text": "join('-', ['a','b','c']) = "}, {"lingo": {"state": {"test_join": {}}}}, {"break": 2},
            
            {"text": "Logical Functions:"},
            {"break": 1},
            {"text": "and(true, true) = "}, {"lingo": {"state": {"test_and_true": {}}}}, {"break": 1},
            {"text": "and(true, false) = "}, {"lingo": {"state": {"test_and_false": {}}}}, {"break": 1},
            {"text": "or(false, true) = "}, {"lingo": {"state": {"test_or_true": {}}}}, {"break": 1},
            {"text": "or(false, false) = "}, {"lingo": {"state": {"test_or_false": {}}}}, {"break": 2},
            
            {"text": "Math Functions:"},
            {"break": 1},
            {"text": "add(10, 5) = "}, {"lingo": {"state": {"test_add": {}}}}, {"break": 1},
            {"text": "sub(10, 3) = "}, {"lingo": {"state": {"test_sub": {}}}}, {"break": 1},
            {"text": "mul(4, 7) = "}, {"lingo": {"state": {"test_mul": {}}}}, {"break": 1},
            {"text": "div(15, 3) = "}, {"lingo": {"state": {"test_div": {}}}}, {"break": 1},
            {"text": "pow(2, 3) = "}, {"lingo": {"state": {"test_pow": {}}}}, {"break": 1},
            {"text": "min(3, 7) = "}, {"lingo": {"state": {"test_min": {}}}}, {"break": 1},
            {"text": "max(3, 7) = "}, {"lingo": {"state": {"test_max": {}}}}, {"break": 1},
            {"text": "abs(-10) = "}, {"lingo": {"state": {"test_abs": {}}}}, {"break": 2},
            
            {"text": "Comparison Functions:"},
            {"break": 1},
            {"text": "eq(5, 5) = "}, {"lingo": {"state": {"test_eq_true": {}}}}, {"break": 1},
            {"text": "eq(5, 3) = "}, {"lingo": {"state": {"test_eq_false": {}}}}, {"break": 1},
            {"text": "ne(5, 3) = "}, {"lingo": {"state": {"test_ne_true": {}}}}, {"break": 1},
            {"text": "ne(5, 5) = "}, {"lingo": {"state": {"test_ne_false": {}}}}, {"break": 1},
            {"text": "lt(3, 5) = "}, {"lingo": {"state": {"test_lt_true": {}}}}, {"break": 1},
            {"text": "lt(5, 3) = "}, {"lingo": {"state": {"test_lt_false": {}}}}, {"break": 1},
            {"text": "le(5, 5) = "}, {"lingo": {"state": {"test_le_true": {}}}}, {"break": 1},
            {"text": "le(7, 5) = "}, {"lingo": {"state": {"test_le_false": {}}}}, {"break": 1},
            {"text": "gt(7, 5) = "}, {"lingo": {"state": {"test_gt_true": {}}}}, {"break": 1},
            {"text": "gt(3, 5) = "}, {"lingo": {"state": {"test_gt_false": {}}}}, {"break": 1},
            {"text": "ge(5, 5) = "}, {"lingo": {"state": {"test_ge_true": {}}}}, {"break": 1},
            {"text": "ge(3, 5) = "}, {"lingo": {"state": {"test_ge_false": {}}}}, {"break": 2},

            {"text": "List Functions:"},
            {"break": 1},
            {"text": "len([1,2,3,4,5]) = "}, {"lingo": {"state": {"test_len_list": {}}}}, {"break": 1},
            {"text": "len('hello') = "}, {"lingo": {"state": {"test_len_string": {}}}}, {"break": 1},
            {"text": "any([true, false]) = "}, {"lingo": {"state": {"test_any_true": {}}}}, {"break": 1},
            {"text": "any([false, false]) = "}, {"lingo": {"state": {"test_any_false": {}}}}, {"break": 1},
            {"text": "all([true, true]) = "}, {"lingo": {"state": {"test_all_true": {}}}}, {"break": 1},
            {"text": "all([false, false]) = "}, {"lingo": {"state": {"test_all_false": {}}}}, {"break": 2},
            {"text": "slice([0,1,2,3,4], stop=2) = "}, {"lingo": {"state": {"test_slice_default": {}}}}, {"break": 1},
            {"text": "slice([0,1,2,3,4,5,6], start=2, stop=5) = "}, {"lingo": {"state": {"test_slice_start": {}}}}, {"break": 1},
            {"text": "slice([0,1,2,3,4], start=1, stop=4, step=2) = "}, {"lingo": {"state": {"test_slice_step": {}}}}, {"break": 1},

            {"text": "range(5) = "}, {"lingo": {"state": {"test_range_default": {}}}}, {"break": 1},
            {"text": "range(1, 7) = "}, {"lingo": {"state": {"test_range_start": {}}}}, {"break": 1},
            {"text": "range(0, 10, 2) = "}, {"lingo": {"state": {"test_range_step": {}}}}, {"break": 1},
            {"text": "map(add(item, 10), [1,2,3,4,5]) = "}, {"lingo": {"state": {"test_map": {}}}}, {"break": 1},
            {"text": "filter(gt(item, 3), [1,2,3,4,5,6,7]) = "}, {"lingo": {"state": {"test_filter": {}}}}, {"break": 1},
            {"text": "dropwhile(lt(item, 4), [1,2,3,4,5,6,7]) = "}, {"lingo": {"state": {"test_dropwhile": {}}}}, {"break": 1},
            {"text": "takewhile(lt(item, 4), [1,2,3,4,5,6,7]) = "}, {"lingo": {"state": {"test_takewhile": {}}}}, {"break": 1},
            {"text": "reversed([1,2,3]) = "}, {"lingo": {"state": {"test_reversed": {}}}}, {"break": 1},
            {"text": "sum([1,2,3], start=0) = "}, {"lingo": {"state": {"test_sum": {}}}}, {"break": 1},
            {"text": "sum([1,2,3], start=10) = "}, {"lingo": {"state": {"test_sum_start": {}}}}, {"break": 1},
            {"text": "sort([5,2,9]) = "}, {"lingo": {"state": {"test_sorted": {}}}}, {"break": 1},
            {"text": "accumulate([1,2,3,4], add) = "}, {"lingo": {"state": {"test_accumulate": {}}}}, {"break": 1},
            {"text": "accumulate([1,2,3,4], add, initial=10) = "}, {"lingo": {"state": {"test_accumulate_initial": {}}}}, {"break": 1},
            {"text": "reduce([1,2,3,4], add) = "}, {"lingo": {"state": {"test_reduce": {}}}}, {"break": 1},
            {"text": "reduce([1,2,3,4], add, initial=10) = "}, {"lingo": {"state": {"test_reduce_initial": {}}}}, {"break": 2},

            {"text": "Time Functions:"},
            {"break": 1},
            {"text": "current.weekday() = "}, {"lingo": {"call": "current.weekday"}}, {"break": 1},
            {"text": "datetime.now() = "}, {"lingo": {"call": "datetime.now"}}, {"break": 1},
            {"text": "random.randint(1, 10) = "}, {"lingo": {"call": "random.randint", "args": {"a": 1, "b": 10}}}, {"break": 1}
        ]}
    ]
}